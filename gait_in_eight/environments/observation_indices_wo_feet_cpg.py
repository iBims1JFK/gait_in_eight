import numpy as np


values_per_joint = 3
values_per_foot = 2

# Quadruped joints
QUADRUPED_FRONT_LEFT_HIP = np.arange(0, values_per_joint)
QUADRUPED_FRONT_LEFT_THIGH = np.arange(QUADRUPED_FRONT_LEFT_HIP[-1] + 1, QUADRUPED_FRONT_LEFT_HIP[-1] + 1 + values_per_joint)
QUADRUPED_FRONT_LEFT_CALF = np.arange(QUADRUPED_FRONT_LEFT_THIGH[-1] + 1, QUADRUPED_FRONT_LEFT_THIGH[-1] + 1 + values_per_joint)
QUADRUPED_FRONT_RIGHT_HIP = np.arange(QUADRUPED_FRONT_LEFT_CALF[-1] + 1, QUADRUPED_FRONT_LEFT_CALF[-1] + 1 + values_per_joint)
QUADRUPED_FRONT_RIGHT_THIGH = np.arange(QUADRUPED_FRONT_RIGHT_HIP[-1] + 1, QUADRUPED_FRONT_RIGHT_HIP[-1] + 1 + values_per_joint)
QUADRUPED_FRONT_RIGHT_CALF = np.arange(QUADRUPED_FRONT_RIGHT_THIGH[-1] + 1, QUADRUPED_FRONT_RIGHT_THIGH[-1] + 1 + values_per_joint)
QUADRUPED_BACK_LEFT_HIP = np.arange(QUADRUPED_FRONT_RIGHT_CALF[-1] + 1, QUADRUPED_FRONT_RIGHT_CALF[-1] + 1 + values_per_joint)
QUADRUPED_BACK_LEFT_THIGH = np.arange(QUADRUPED_BACK_LEFT_HIP[-1] + 1, QUADRUPED_BACK_LEFT_HIP[-1] + 1 + values_per_joint)
QUADRUPED_BACK_LEFT_CALF = np.arange(QUADRUPED_BACK_LEFT_THIGH[-1] + 1, QUADRUPED_BACK_LEFT_THIGH[-1] + 1 + values_per_joint)
QUADRUPED_BACK_RIGHT_HIP = np.arange(QUADRUPED_BACK_LEFT_CALF[-1] + 1, QUADRUPED_BACK_LEFT_CALF[-1] + 1 + values_per_joint)
QUADRUPED_BACK_RIGHT_THIGH = np.arange(QUADRUPED_BACK_RIGHT_HIP[-1] + 1, QUADRUPED_BACK_RIGHT_HIP[-1] + 1 + values_per_joint)
QUADRUPED_BACK_RIGHT_CALF = np.arange(QUADRUPED_BACK_RIGHT_THIGH[-1] + 1, QUADRUPED_BACK_RIGHT_THIGH[-1] + 1 + values_per_joint)
# General
TRUNK_LINEAR_ACCELERATIONS = np.arange(QUADRUPED_BACK_RIGHT_CALF[-1] + 1, QUADRUPED_BACK_RIGHT_CALF[-1] + 1 + 3)
TRUNK_ANGULAR_ACCELERATIONS = np.arange(TRUNK_LINEAR_ACCELERATIONS[-1] + 1, TRUNK_LINEAR_ACCELERATIONS[-1] + 1 + 3)
TRUNK_LINEAR_VELOCITIES = np.arange(TRUNK_ANGULAR_ACCELERATIONS[-1] + 1, TRUNK_ANGULAR_ACCELERATIONS[-1] + 1 + 3)
TRUNK_ANGULAR_VELOCITIES = np.arange(TRUNK_LINEAR_VELOCITIES[-1] + 1, TRUNK_LINEAR_VELOCITIES[-1] + 1 + 3)
GOAL_VELOCITIES = np.arange(TRUNK_ANGULAR_VELOCITIES[-1] + 1, TRUNK_ANGULAR_VELOCITIES[-1] + 1 + 3)
PROJECTED_GRAVITY = np.arange(GOAL_VELOCITIES[-1] + 1, GOAL_VELOCITIES[-1] + 1 + 3)
CPG = np.arange(PROJECTED_GRAVITY[-1] + 1, PROJECTED_GRAVITY[-1] + 1 + 2)

# Total observation size
OBSERVATION_SIZE = CPG[-1] + 1


def update_nr_height_samples(nr_height_samples):
    global HEIGHT
    HEIGHT = np.arange(PROJECTED_GRAVITY[-1] + 1, PROJECTED_GRAVITY[-1] + 1 + nr_height_samples)
    global OBSERVATION_SIZE
    OBSERVATION_SIZE = HEIGHT[-1] + 1
